/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   merge2                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: siwolee <siwolee@student.42seoul.kr>       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/01/11 10:00:28 by siwolee           #+#    #+#             */
/*   Updated: 2023/01/16 16:29:03 by siwolee          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/push_swap.h"

char	get_big_ab(char ab)
{
	if (ab == ATOP)
		return (BTOP);
	else if (ab == BTOP)
		return (ATOP);
	else if (ab == ABOT)
		return (BTOP);
	else
		return (ATOP);
}

char	get_small_ab(char ab)
{
	if (ab == ATOP)
		return (BBOT);
	else if (ab == BTOP)
		return (ABOT);
	else if (ab == ABOT)
		return (BBOT);
	else
		return (ABOT);
}

void	merge_sort(t_stack *s, char ab, int len, unsigned int pivot)
{
	t_node		*node;
	t_node		*next;
	int		cnt[3];

	// printf("%smergesort %d : len%d pivot%d%s\n", C_PINK, ab, len, pivot, C_RS);
	// print_queue_ab(s);
	if (len <= 3)
		return (sort_short(s, len, ab));
	node = get_top(s, ab);
	ft_bzero(cnt, sizeof(int) * 3);
	while (node && cnt[2] < len)
	{
		if (ab <= BTOP)
			next = node->next;
		else
			next = node->prev;
		// printf("%d ", node->val);
		if (node->val > pivot)
			sort_big(s, ab) && cnt[0]++;
		else
			sort_small(s, ab) && cnt[1]++;
		node = next;
		cnt[2]++;
	}
	merge_sort(s, get_big_ab(ab), cnt[0], pivot + (cnt[0] >> 1));
	merge_sort(s, get_small_ab(ab), cnt[1], pivot - (cnt[1] >> 1));
}